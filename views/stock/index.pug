extends ../layout

block content
  .d-flex.justify-content-between.align-items-center.mb-3
    h2.mb-0 Stock Dashboard
    a.btn.btn-secondary(href='/admin/services') Back to services

  hr

  p.text-muted.small.mb-3 Displaying stocked quantities, total used (aggregates) and remaining stock. Use the "Create count unit" form below to define a global tracked unit (one sub-unit per unit). Duplicate selection sets are disallowed.

  //- CREATE MATERIAL (GLOBAL COUNT UNIT) FORM
  .card.mb-4
    .card-body
      h5.mb-3 Create count unit (global)
      form#create-count-unit(class='row g-3' novalidate)
        .col-12.col-md-5
          label.form-label(for='cuName') Name
          input.form-control(type='text', id='cuName', placeholder='e.g. A3 STD paper' required)
        .col-12.col-md-3
          label.form-label(for='cuStock') Stocked (initial)
          input.form-control(type='number', id='cuStock', value='0', min='0', step='1')
        .col-12
          small.text-muted.mb-2 Select one sub-unit per unit to form the tracked selection set.
        // Units/subunits UI
        .col-12
          .accordion#stockUnitsAccordion
            each unit in units
              - const uid = unit._id
              .accordion-item
                h2.accordion-header
                  button.accordion-button.collapsed(type='button', data-bs-toggle='collapse', data-bs-target=`#u-${uid}`, aria-expanded='false')
                    | #{unit.name}
                .accordion-collapse.collapse(id=`u-${uid}`)
                  .accordion-body
                    ul.list-group
                      each su in subunits.filter(s=>String(s.unit) === String(uid))
                        li.list-group-item
                          label.form-check
                            input.form-check-input.unit-sub-checkbox(data-unit=uid data-subunit=su._id type='checkbox')
                            |&nbsp;
                            span= su.name
        .col-12.text-end
          // button is type=button so native form submit is not triggered
          button.btn.btn-primary(type='button' id='createCountBtn')
            span.spinner-border.spinner-border-sm.me-2(style='display:none;' id='createCountSpinner')
            | Create Count Unit

  //- STOCK TABLE
  .card
    .card-body
      .table-responsive
        table.table.table-striped.table-hover.table-sm
          thead
            tr
              th Material
              th.text-center Stocked
              th.text-center Used
              th.text-center Remaining
              th.text-center Actions
          tbody
            if materials && materials.length
              each m in materials
                - const used = (typeof m.used === 'number') ? m.used : 0;
                - const stocked = (typeof m.stocked === 'number') ? m.stocked : ((typeof m.stock === 'number') ? m.stock : 0);
                - const remaining = (typeof m.remaining === 'number') ? m.remaining : Math.max(0, stocked - used);
                tr(data-id=m._id)
                  td
                    strong= m.name
                    if m.selections && m.selections.length
                      br
                      small.text-muted
                        - const labels = m.selections.map(s => (s.unit && s.unit.name ? s.unit.name + ': ' + (s.subUnit && s.subUnit.name ? s.subUnit.name : s.subUnit) : ''));
                        = labels.join(' + ')
                  td.text-center= stocked
                  td.text-center= used
                  td.text-center
                    if remaining < 0
                      span.text-danger #{remaining}
                    else
                      span.text-success #{remaining}
                  td.text-center
                    button.btn.btn-sm.btn-outline-primary.adjust-stock-btn(data-id=m._id data-stocked=stocked type='button') Adjust
                    button.btn.btn-sm.btn-outline-danger.ms-1.delete-material-btn(data-id=m._id type='button') Delete
            else
              tr
                td.text-muted(colspan='5') No count units defined.

  // Adjust stock modal
  .modal.fade(id='adjustStockModal', tabindex='-1', aria-labelledby='adjustStockModalLabel', aria-hidden='true')
    .modal-dialog.modal-dialog-centered
      .modal-content
        .modal-header
          h5.modal-title(id='adjustStockModalLabel') Adjust stocked quantity
          button.btn-close(type='button', data-bs-dismiss='modal', aria-label='Close')
        .modal-body
          form#adjustStockForm
            input(type='hidden', id='adjustMaterialId')
            .mb-3
              label.form-label(for='adjustStockInput') New stocked quantity
              input.form-control(type='number', id='adjustStockInput', min='0', step='1', required)
        .modal-footer
          button.btn.btn-secondary(type='button', data-bs-dismiss='modal') Cancel
          button.btn.btn-primary(type='button', id='saveAdjustStockBtn') Save

  // Delete Confirmation Modal (shared)
  .modal.fade(id='deleteConfirmModal', tabindex='-1', aria-labelledby='deleteConfirmModalLabel', aria-hidden='true')
    .modal-dialog.modal-dialog-centered
      .modal-content
        .modal-header
          h5.modal-title(id='deleteConfirmModalLabel') Confirm delete
          button.btn-close(type='button', data-bs-dismiss='modal', aria-label='Close')
        .modal-body
          p#deleteConfirmMessage Are you sure you want to delete this item?
          p.text-muted.small.mt-2 Deleting cannot be undone.
        .modal-footer
          button.btn.btn-secondary(type='button', data-bs-dismiss='modal') Cancel
          button.btn.btn-danger(type='button', id='confirmDeleteBtn') Yes, delete

block append scripts
  script(src='/public/javascripts/stock.js')
