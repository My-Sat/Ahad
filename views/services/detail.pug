extends ../layout

block content
  .d-flex.justify-content-between.align-items-center.mb-3
    h2.mb-0= service.name
    a.btn.btn-secondary(href='/admin/services') Back

  hr

  //- Units accordion
  #unitsAccordion.accordion.mb-4
    if !service.components || service.components.length === 0
      .alert.alert-info No components available. Add units and sub-units first.
    else
      each comp, idx in service.components
        - const unit = comp.unit
        - const panelId = `unitPanel-${idx}`
        .accordion-item
          h2.accordion-header(id=`heading-${panelId}`)
            button.accordion-button.collapsed(type='button', data-bs-toggle='collapse', data-bs-target=`#collapse-${panelId}`, aria-expanded='false', aria-controls=`collapse-${panelId}`)
              .d-flex.justify-content-between.w-100
                span.unit-name #{unit && unit.name ? unit.name : 'Unit'}
                small.text-muted.ms-2 #{ (comp.subUnits && comp.subUnits.length) ? comp.subUnits.length + ' sub-units' : '0 sub-units' }

          .accordion-collapse.collapse(id=`collapse-${panelId}`)
            .accordion-body
              ul.list-group
                each su in comp.subUnits
                  - const subId = (typeof su === 'object') ? su._id : su
                  - const subName = (typeof su === 'object') ? (su.name || subId) : subId
                  li.list-group-item.d-flex.align-items-center
                    label.form-check.mb-0.d-flex.align-items-center.w-100
                      //- checkbox but we'll enforce single-check-per-unit via JS (acts like radio)
                      input.form-check-input.unit-sub-checkbox.me-2(type='checkbox', data-unit=unit._id, data-subunit=subId)
                      span.flex-grow-1= subName

  //- Assign price form — use input-group so button aligns with field
  form#assign-price(method='post', action=`/admin/services/${service._id}/prices`, class='mb-4 needs-validation', novalidate)
    input(type='hidden', name='selections', id='selectionsInput')
    .row.g-2.align-items-center
      .col-auto
        label.form-label(for='priceInput') Price (GH₵)
      .col-md-4
        .input-group
          input.form-control(type='number', step='0.01', name='price', id='priceInput', required, placeholder='0.00')
      .col-md-4
        .input-group
          input.form-control(type='number', step='0.01', name='price2', id='price2Input', placeholder='F/B price (optional)')
          span.input-group-text.small F/B
      .col-auto
        button.btn.btn-success(type='submit', id='assignBtn')
          span.spinner-border.spinner-border-sm.me-2(role='status', aria-hidden='true', id='assignSpinner', style='display:none;')
          | Assign Price
      .col-auto
        small.text-muted Select one sub-unit per relevant unit, then click Assign.

  hr

  //- Prices section (we will refresh this element via AJAX when changes happen)
  #pricesSection
    h5.mb-2 Existing Price Rules
    if prices && prices.length
      table.table.table-striped.table-hover.table-sm
        thead
          tr
            th Selection(s)
            th.text-end Price
            th.text-end F/B
            th.text-center Actions
        tbody
          each p in prices
            tr(data-price-id=p._id)
              td
                if p.selectionLabel
                  = p.selectionLabel
                else if p.selections && p.selections.length
                  - var len = p.selections.length
                  each s, i in p.selections
                    - var unitName = s.unit && s.unit.name ? s.unit.name : (s.unit ? String(s.unit) : '');
                    - var subName = s.subUnit && s.subUnit.name ? s.subUnit.name : (s.subUnit ? String(s.subUnit) : '');
                    span.me-1 #{unitName}: #{subName}
                    if i != len - 1
                      |  + 
                else
                  | (no label)
              td.text-end= (typeof p.price === 'number') ? p.price.toFixed(2) : p.price
              td.text-end
                if p.price2 !== undefined && p.price2 !== null
                  = (typeof p.price2 === 'number') ? p.price2.toFixed(2) : p.price2
                else
                  span.text-muted small N/A
              td.text-center
                //- action dropdown icon (compact)
                .dropdown.d-inline-block
                  button.btn.btn-sm.btn-light.dropdown-toggle(type='button', id=`priceMenuBtn-${p._id}`, data-bs-toggle='dropdown', aria-expanded='false', aria-haspopup='true', title='Actions')
                    i(class='bi bi-three-dots-vertical', aria-hidden='true')
                    span.visually-hidden Actions
                  ul.dropdown-menu.dropdown-menu-end(aria-labelledby=`priceMenuBtn-${p._id}`)
                    li
                      button.dropdown-item.edit-price-btn(
                        type='button',
                        data-price-id=p._id,
                        data-price=(typeof p.price === 'number' ? p.price.toFixed(2) : p.price),
                        data-price2=(typeof p.price2 === 'number' ? p.price2.toFixed(2) : (p.price2 ? p.price2 : '')),
                        data-selection-label=(p.selectionLabel || '')
                      )
                        i.bi.bi-pencil.me-2
                        | Edit
                    li
                      button.dropdown-item.open-delete-price(type='button', data-price-id=p._id)
                        i.bi.bi-trash.me-2
                        | Delete
    else
      p.text-muted No price rules defined for this service yet.

  //- Edit price modal (add price2)
  .modal.fade(id='editPriceModal', tabindex='-1', aria-labelledby='editPriceModalLabel', aria-hidden='true')
    .modal-dialog.modal-dialog-centered
      .modal-content
        .modal-header
          h5.modal-title(id='editPriceModalLabel') Edit Price Rule
          button.btn-close(type='button', data-bs-dismiss='modal', aria-label='Close')
        .modal-body
          form#editPriceForm
            input(type='hidden', id='editPriceId', name='priceId')
            .mb-3
              label.form-label(for='editPriceInput') Price (GH₵)
              input.form-control(type='number', step='0.01', id='editPriceInput', name='price', required)
              .invalid-feedback Please provide a valid price.
            .mb-3
              label.form-label(for='editPrice2Input') F/B Price (optional)
              input.form-control(type='number', step='0.01', id='editPrice2Input', name='price2')
            .mb-2
              small.text-muted#editSelectionLabel
        .modal-footer
          button.btn.btn-secondary(type='button', data-bs-dismiss='modal') Cancel
          button.btn.btn-primary(type='button', id='saveEditPriceBtn') Save

  //- No inline scripts here — service_detail.js will handle the JS behaviors.
  block append scripts
    script(src='/public/javascripts/service_detail.js')
